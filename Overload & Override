override（重写，覆盖）

​​ 1、方法名、参数、返回值相同。

​2、子类方法不能缩小父类方法的访问权限。

3、子类方法不能抛出比父类方法更多的异常(但子类方法可以不抛出异常)。

4、存在于父类和子类之间。

​5、方法被定义为final不能被重写。

overload（重载，过载）

​​1、参数类型、个数、顺序至少有一个不相同。 

​ 2、不能重载只有返回值不同的方法名。
  3、存在于父类和子类、同类中。



方法的重写(Overriding)和重载(Overloading)是Java多态性的不同表现。

重写(Overriding)是父类与子类之间多态性的一种表现，而重载(Overloading)是一个类中多态性的一种表现。如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写 (Overriding)。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被"屏蔽"了.



如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型或有不同的参数次序，则称为方法的重载(Overloading)。不能通过访问权限、返回类型、抛出的异常进行重载.



1. Override 特点

1、覆盖的方法的标志必须要和被覆盖的方法的标志完全匹配，才能达到覆盖的效果； 

2、覆盖的方法的返回值必须和被覆盖的方法的返回一致；

3、覆盖的方法所抛出的异常必须和被覆盖方法的所抛出的异常一致，或者是其子类；

4、被覆盖的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。



2.Overload 特点

1、在使用重载时只能通过不同的参数样式。例如，不同的参数类型，不同的参数个数，不同的参数顺序（当然，同一方法内的几个参数类型必须不一样，例如可以是fun(int, float)， 但是不能为fun(int, int)）；

2、不能通过访问权限、返回类型、抛出的异常进行重载；

3、方法的异常类型和数目不会对重载造成影响； 

4、对于继承来说，如果某一方法在父类中是访问权限是priavte，那么就不能在子类对其进行重载，如果定义的话，也只是定义了一个新方法，而不会达到重载的效果。



重载可以改变返回值类型，但是如果只是返回值类型不一样是算不上重载的。重载的判断条件还是根据参数来，只不过是说重载的函数可以返回值不一样，就是说重载可以决定返回值类型，但是返回值类型不能决定重载。



Overloaded的方法是可以改变返回值的类型。这句话是正确的，唯一区分方法重载的是方法的参数列表不同，当参数列表不同时就可改变其返回类型

package alltest;

​public class OverLoadTest {

​public void m1(int x){}

​public int m1(int x,int y){ return 12;}

​// public String m1(int x){return "12";} 

​//error!Duplicate method m1(int)

​//in type OverLoadTest 

​public String m1(int x,int y,int z){return "abc";}

​public int m1(String x,int y){return 12;};

}


当参数列表不同时，能达到区分重载时，就可以改变方法的返回类型​。
